configfile: "config.yaml"

include: "./scripts/input_functions.py"

wildcard_constraints:
    bin_size="[0-9]+",
    file_id="[0-9abcdef-]+",
    smoothing="[0-9]+",
    extreme="[0-9.]+"

onerror:
    print("An error occurred")
    shell("mail -s 'an error occurred' andrejbalaz001@gmail.com < {log}")

rule:
    output:
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/segments/{ctype}.uniq.txt",
    shell:
        """
        bash scripts/get_segments.sh
        """

rule:
    output:
        "{data_dir}/manifests/{ctype}.query.tsv",
    conda:
        "envs/tcgabiolinks.yml",
    shell:
        """
        unset http_proxy && unset https_proxy && unset ftp_proxy 
        Rscript ./scripts/get_manifest.R
        """

rule:
    input:
        "{data_dir}/segments/{ctype}.uniq.txt",
        "{data_dir}/manifests/{ctype}.query.tsv",
    output:
        "{data_dir}/manifests/{ctype}.merged.tsv",
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/add_segment_data.py    \
            --segments {input[0]}               \
            --gdc_query {input[1]}              \
            --merged {output[0]}                \
            --filtered {output[1]}
        """

rule get_filtered:
    input:
        expand("{data_dir}/manifests/{ctype}.filtered.tsv",
                data_dir=config['data_dir'],
                ctype=config['ctype'])

# rule:
#     input:
#         "{data_dir}/manifests/{ctype}.filtered.tsv",
#     output:
#         "{data_dir}/bams/original/{ctype}/{file_id}.bam",
#     params:
#         "{data_dir}/manifests/{ctype}.{file_id}.tsv",
#     threads: 
#         32
#     log: "{data_dir}/logs/{ctype}_{file_id}.log"
#     shell:
#         """
#         unset http_proxy && unset https_proxy;
#         echo "$(head -n 1 {input})" > {params}; 
#         echo "$(grep {wildcards.file_id} {input})" >> {params}
#         
#         ./scripts/gdc-client download \
#             --n-processes 32 \
#             -t ~/reprator/faststorage/data/div/gdc-user-token.2019-11-05T09_17_07.518Z.txt \
#             -m {params} > {log} 2> {log}
#
#         mv ./{wildcards.file_id}/*.bam {output}
#         rm -r ./{wildcards.file_id}
#         rm {params}
#         """

rule aria2c_download:
    input:
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    output:
        "{data_dir}/bams/original/{ctype}/{file_id}.bam",
    params:
        "{data_dir}/manifests/{ctype}.{file_id}.tsv",
    threads:
        16
    log: 
        "{data_dir}/logs/{ctype}_{file_id}.log",
    conda:
        "envs/aria.yml",
    shell:
        """
        unset http_proxy && unset https_proxy && unset ftp_proxy;
        token=$(<{config[token]})
        
        aria2c \
            -x 16 \
            -o "./{wildcards.file_id}.bam" \
            --header "X-Auth-Token: $token" \
            "https://api.gdc.cancer.gov/data/{wildcards.file_id}" > {log} 2> {log}

        mv ./{wildcards.file_id}.bam {output[0]}
        """

rule:
    input:
        get_download_ids,
    output:
        "{data_dir}/bams/original/{ctype}/completed.txt",
    shell:
        """
        touch {output}
        """

rule:
    input:
        "{data_dir}/bams/original/{ctype}/{file_id}.bam",
    output:
        "{data_dir}/fastq/{ctype}/{file_id}.fq",
    conda:
        "envs/biotools.yml",
    shell:
        """
        samtools bam2fq {input} > {output}
        """

rule download_mapability:
    output:
        "{data_dir}/reference/hg19_mapability.bw",
        "{data_dir}/reference/hg19_mapability.wig",
    params:
        config['mapability'],
    conda:
        "envs/biotools.yml",
    shell:
        """
        wget -O {output[0]} {params[0]}
        mapCounter {output[0]} > {output[1]}
        """

rule download_reference:
    output:
        "{data_dir}/reference/hg19_raw.fa.gz",
    params:
        config['reference'],
    shell:
        """
        wget -O {output[0]} {params[0]}
        """

rule:
    input:
        "{data_dir}/reference/hg19_raw.fa.gz",
        "{data_dir}/reference/hg19_mapability.wig",
    output:
        "{data_dir}/reference/hg19_pure.fa",
        "{data_dir}/reference/hg19_gc.wig",
        "{data_dir}/reference/hg19_pure.fa.gz",
    params:
        "{data_dir}/reference/hg19_raw.fa",
    conda:
        "envs/biotools.yml",
    shell:
        """
        gunzip -c {input[0]} > {params[0]}
        chroms=$(grep fixed {input[1]} | cut -f 2 -d ' ' | cut -f 2 -d '=' | tr '\n' ',' | sed 's/,$//g')
        seqkit grep -n -p ${{chroms}} {params[0]} | seqkit sort -n > {output[0]}
        gcCounter {output[0]} > {output[1]}
        gzip -c {output[0]} > {output[2]}
        bwa index {output[2]}
        rm {params[0]}
        """

rule:
    input:
        "{data_dir}/fastq/{ctype}/{file_id}.fq",
        "{data_dir}/reference/hg19_pure.fa.gz",
    output:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam.bai",
    conda:
        "envs/biotools.yml",
    threads:
        16
    shell:
        """
        bwa mem -t 16 {input[1]} {input[0]} | samtools sort -@ 16 -o {output[0]} -
        samtools index -@ 16 {output[0]} {output[1]} 
        """

rule:
    input:
        get_downloaded_to_remapped,
    output:
        "{data_dir}/bams/remapped/{ctype}/completed.txt",
    shell:
        """
        touch {output}
        """

rule download_bams:
    input: 
        expand("{data_dir}/bams/original/{ctype}/completed.txt", 
                data_dir=config['data_dir'],
                ctype=config['ctype'])

rule remap_bams:
    input:
        expand("{data_dir}/bams/remapped/{ctype}/completed.txt",
                data_dir=config['data_dir'],
                ctype=config['ctype'])

rule bam_to_wig:
    input:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
    output:
        "{data_dir}/wigs/{ctype}/{file_id}.wig",
    conda:
        "envs/biotools.yml",
    shell:
        """
        readCounter {input[0]} > {output[0]}
        """

rule correct_gc_and_map:
    input:
        "{data_dir}/wigs/{ctype}/{file_id}.wig",
        "{data_dir}/reference/hg19_mapability.wig",
        "{data_dir}/reference/hg19_gc.wig",
    output:
        "{data_dir}/signal/{ctype}/{file_id}.tsv"
    conda:
        "envs/biotools.yml",
    shell:
        """
        Rscript ./scripts/correct_gc_and_map.R  \
            --gc {input[2]}                     \
            --map {input[1]}                    \
            --sample {input[0]}                 \
            --out {output[0]}
        """

rule add_segments:
    input:
        "{data_dir}/manifests/{ctype}.filtered.tsv",
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/signal/{ctype}/{file_id}.tsv",
    output:
        "{data_dir}/signal/{ctype}/{file_id}.feather",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/create_dataframe.py        \
            --manifest {input[0]}                   \
            --segments {input[1]}                   \
            --signal {input[2]}                     \
            --sample {wildcards.file_id}            \
            --output {output[0]}
        """

rule:
    input:
        get_remapped_to_signal,
    output:
        "{data_dir}/signal/{ctype}/completed.txt",
    shell:
        """
        touch {output}
        """

rule get_feather:
    input:
        expand("{data_dir}/signal/{ctype}/completed.txt",
                data_dir=config['data_dir'],
                ctype=config['ctype'])

rule download_bigwig:
    output:
        "{data_dir}/bigwigs/rep_timing.bw",
    shell:
        """
        # wget http://hgdownload.cse.ucsc.edu/goldenpath/hg19/encodeDCC/wgEncodeUwRepliSeq/wgEncodeUwRepliSeqGm12878WaveSignalRep1.bigWig
        wget -O {output[0]} {config[signal]}
        """

rule bigwig_to_dataframe:
    input:
        # get_random_feather,
        "{data_dir}/signal/LUAD/603e16bf-9b05-49c9-a925-f409626c969a.feather",
        "{data_dir}/bigwigs/rep_timing.bw",
    output:
        "{data_dir}/bigwigs/rep_timing.feather",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/convert_bigwig_to_dataframe.py \
            --feather_file {input[0]}                   \
            --bigwig_file {input[1]}                    \
            --output {output[0]}
        """
 
rule:
    input:
        "{data_dir}/signal/{ctype}/{file_id}.feather",
        "{data_dir}/bigwigs/rep_timing.feather",
    output:
        "{data_dir}/residuals/{ctype}/{file_id}/{smoothing}/signal.feather",
        # "{data_dir}/residuals/{ctype}/{file_id}/{smoothing}/plots/chr1.png",
        "{data_dir}/residuals/{ctype}/{file_id}/{smoothing}/lm_stats.tsv",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/build_linear_model.py  \
            --datafile "{input[0]}"               \
            --rep_timing "{input[1]}"             \
            --signal "{output[0]}"
        """

rule:
    input:
        get_residuals,
    output:
        "{data_dir}/residuals/{ctype}/{smoothing}_completed.txt",
    shell:
        """
        touch {output}
        """

rule get_residuals:
    input:
        expand("{data_dir}/residuals/{ctype}/{smoothing}_completed.txt",
                data_dir=config['data_dir'],
                ctype=config['ctype'],
                smoothing=config['smoothing'])

rule:
    input:
        "{data_dir}/signal/{ctype}/{file_id}.feather",
        "{data_dir}/bigwigs/rep_timing.feather",
    output:
        "{data_dir}/residuals/{ctype}/{file_id}/smoothing_{smoothing}/extreme_{extreme}/signal.feather",
        "{data_dir}/residuals/{ctype}/{file_id}/smoothing_{smoothing}/extreme_{extreme}/lm_stats.tsv",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/build_linear_model_with_extremes.py  \
            --datafile "{input[0]}"               \
            --rep_timing "{input[1]}"             \
            --signal "{output[0]}"
        """

rule:
    input:
        get_residuals_extremes,
    output:
        "{data_dir}/residuals/{ctype}/{smoothing}_{extreme}_completed.txt",
    shell:
        """
        touch {output}
        """

rule get_residuals_extremes:
    input:
        expand("{data_dir}/residuals/{ctype}/{smoothing}_{extreme}_completed.txt",
                data_dir=config['data_dir'],
                ctype=config['ctype'],
                smoothing=config['smoothing'],
                extreme=config['extreme'])

rule:
    input:
        config['reference'],
    output:
        "{data_dir}/bed/{bin_size}.bed",
    conda:
        "envs/biotools.yml",
    shell:
        """
        python ./scripts/create_bed.py      \
            --input {input}                 \
            --output {output}               \
            --bin_size {wildcards.bin_size}
        """

rule:
    input:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
        "{data_dir}/bed/{bin_size}.bed",
    output:
        "{data_dir}/coverage/{ctype}/{file_id}_{bin_size}.tsv.gz",
    conda:
        "envs/biotools.yml",
    shell:
        """
        samtools bedcov {input[1]} {input[0]} | gzip > {output}
        """ 

rule:
    input:
        "{data_dir}/coverage/{ctype}/{file_id}_{bin_size}.tsv.gz",
        "{data_dir}/manifests/{ctype}.query.tsv",
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/fixed/blood_means.tsv.gz",
    output:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.tsv.gz",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/generate_dataframes.py \
            --coverage_cancer_file {input[0]}   \
            --query_file {input[1]}             \
            --segment_file {input[2]}           \
            --coverage_blood_file {input[3]}    \
            --output_file {output}
        """

rule main:
    input:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.tsv.gz",        
    output:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.lm.log",
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.residuals.tsv.gz",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/lin_model.py   \
            --input_file {input}        \
            --log_file {output[0]}      \
            --output_file {output[1]}
        """

rule run_main:
    input:
        get_files,

# end of finished parts 20200326
rule:
    input:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.residuals.tsv.gz",
    output:
        "{data_dir}/bigwig/{ctype}/{file_id}_{bin_size}.smoothed_residuals.bw",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/optimize_filtering_and_smoothing.py
        """


