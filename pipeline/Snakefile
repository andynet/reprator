configfile: "config.yaml"

include: "./scripts/input_functions.py"

wildcard_constraints:
    bin_size="[0-9]+"
#     size="full|[0-9]+x[0-9]+",

rule:
    output:
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/segments/{ctype}.uniq.txt",
    shell:
        """
        bash scripts/get_segments.sh
        """

rule:
    output:
        "{data_dir}/manifests/{ctype}.query.tsv",
    conda:
        "envs/tcgabiolinks.yml",
    shell:
        """
        unset http_proxy && unset https_proxy && unset ftp_proxy 
        Rscript ./scripts/get_manifest.R
        """

rule:
    input:
        "{data_dir}/segments/{ctype}.uniq.txt",
        "{data_dir}/manifests/{ctype}.query.tsv",
    output:
        "{data_dir}/manifests/{ctype}.merged.tsv",
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/add_segment_data.py    \
            --segments {input[0]}               \
            --gdc_query {input[1]}              \
            --merged {output[0]}                \
            --filtered {output[1]}
        """

rule get_filtered:
    input:
        expand("{data_dir}/manifests/{ctype}.filtered.tsv",
                data_dir=config['data_dir'],
                ctype=config['ctype'])

rule:
    input:
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    output:
        temp("{data_dir}/bams/original/{ctype}/{file_id}.bam"),
    params:
        "{data_dir}/manifests/{ctype}.{file_id}.tsv",
    threads: 
        16
    shell:
        """
        echo "$(head -n 1 {input})" > {params}; 
        echo "$(grep {wildcards.file_id} {input})" >> {params}
        
        ./scripts/gdc-client download \
            --n-processes 16 \
            -t ~/reprator/faststorage/data/div/gdc-user-token.2019-09-30T13_31_26.704Z.txt \
            -m {params}

        mv ./{wildcards.file_id}/*.bam {output}
        rm -r ./{wildcards.file_id}
        rm {params}
        """

rule:
    input:
        "{data_dir}/bams/original/{ctype}/{file_id}.bam",
    output:
        temp("{data_dir}/fastq/{ctype}/{file_id}.fq"),
    conda:
        "envs/biotools.yml",
    priority:
        10
    shell:
        """
        samtools bam2fq {input} > {output}
        """

rule:
    input:
        config['reference'],
    output:
        "{data_dir}/reference/hg19.fa.gz",
    conda:
        "envs/biotools.yml",
    benchmark:
        "{data_dir}/benchmark.txt",
    shell:
        """
        ln -s $(realpath {input}) {output}
        bwa index {output}
        """ 

rule:
    input:
        "{data_dir}/fastq/{ctype}/{file_id}.fq",
        "{data_dir}/reference/hg19.fa.gz",
    output:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam.bai",
    conda:
        "envs/biotools.yml",
    threads:
        16
    priority:
        20
    shell:
        """
        bwa mem -t 16 {input[1]} {input[0]} | samtools sort -@ 16 -o {output[0]} -
        samtools index -@ 16 {output[0]} {output[1]} 
        """

rule:
    input:
        get_file_ids,
    output:
        "{data_dir}/bams/remapped/{ctype}/completed.txt",
    shell:
        """
        touch {output}
        """

rule get_bams:
    input: 
        expand("{data_dir}/bams/remapped/{ctype}/completed.txt", 
                data_dir=config['data_dir'],
                ctype=config['ctype'])

rule:
    input:
        config['reference'],
    output:
        "{data_dir}/bed/{bin_size}.bed",
    conda:
        "envs/biotools.yml",
    shell:
        """
        python ./scripts/create_bed.py      \
            --input {input}                 \
            --output {output}               \
            --bin_size {wildcards.bin_size}
        """

rule:
    input:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
        "{data_dir}/bed/{bin_size}.bed",
    output:
        "{data_dir}/coverage/{ctype}/{file_id}_{bin_size}.tsv.gz",
    conda:
        "envs/biotools.yml",
    shell:
        """
        samtools bedcov {input[1]} {input[0]} | gzip > {output}
        """ 

# end of finished parts
rule:
    input:
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/bed/{bin_size}.bed",
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    output:
        "{data_dir}/segment_means/{ctype}/{file_id}_{bin_size}.tsv.gz",
    conda:
        "envs/biotools.yml",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/generate_dataframes.py part 1
        """

rule:
    input:
        "{data_dir}/coverage/{ctype}/{file_id}_{bin_size}.tsv.gz",
        "{data_dir}/segment_means/{ctype}/{file_id}_{bin_size}.tsv.gz",
        "{data_dir}/fixed/blood_means.tsv.gz",
    output:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.tsv.gz",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/generate_dataframes.py part 2 
        """

rule:
    input:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.tsv.gz",        
    output:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.residuals.tsv.gz",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/lin_model.py
        """

rule:
    input:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.residuals.tsv.gz",
    output:
        "{data_dir}/bigwig/{ctype}/{file_id}_{bin_size}.smoothed_residuals.bw",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/optimize_filtering_and_smoothing.py
        """


