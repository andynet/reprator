configfile: "config.yaml"

include: "./scripts/input_functions.py"

wildcard_constraints:
    bin_size="[0-9]+"

rule:
    output:
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/segments/{ctype}.uniq.txt",
    shell:
        """
        bash scripts/get_segments.sh
        """

rule:
    output:
        "{data_dir}/manifests/{ctype}.query.tsv",
    conda:
        "envs/tcgabiolinks.yml",
    shell:
        """
        unset http_proxy && unset https_proxy && unset ftp_proxy 
        Rscript ./scripts/get_manifest.R
        """

rule:
    input:
        "{data_dir}/segments/{ctype}.uniq.txt",
        "{data_dir}/manifests/{ctype}.query.tsv",
    output:
        "{data_dir}/manifests/{ctype}.merged.tsv",
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/add_segment_data.py    \
            --segments {input[0]}               \
            --gdc_query {input[1]}              \
            --merged {output[0]}                \
            --filtered {output[1]}
        """

rule get_filtered:
    input:
        expand("{data_dir}/manifests/{ctype}.filtered.tsv",
                data_dir=config['data_dir'],
                ctype=config['ctype'])

rule:
    input:
        ancient("{data_dir}/manifests/{ctype}.filtered.tsv"),
    output:
        "{data_dir}/bams/original/{ctype}/{file_id}.bam",
    params:
        "{data_dir}/manifests/{ctype}.{file_id}.tsv",
    threads: 
        32
    log: "{data_dir}/logs/{ctype}_{file_id}.log"
    shell:
        """
        unset http_proxy && unset https_proxy;
        echo "$(head -n 1 {input})" > {params}; 
        echo "$(grep {wildcards.file_id} {input})" >> {params}
        
        ./scripts/gdc-client download \
            --n-processes 32 \
            -t ~/reprator/faststorage/data/div/gdc-user-token.2019-11-05T09_17_07.518Z.txt \
            -m {params} > {log} 2> {log}

        mv ./{wildcards.file_id}/*.bam {output}
        rm -r ./{wildcards.file_id}
        rm {params}
        """

# conda activate test-env
# token=$(<~/reprator/faststorage/data/div/gdc-user-token.2019-11-05T09_17_07.518Z.txt)
# unset http_proxy && unset https_proxy && unset ftp_proxy
# aria2c -x 16 -o '795f4cb5-44bd-4bbf-ba7d-68195fc6deed.bam' --file-allocation='none' --header "X-Auth-Token: $token" 'https://api.gdc.cancer.gov/data/795f4cb5-44bd-4bbf-ba7d-68195fc6deed'


onerror:
    print("An error occurred")
    shell("mail -s 'an error occurred' andrejbalaz001@gmail.com < {log}")

rule:
    input:
        get_download_ids,
    output:
        "{data_dir}/bams/original/{ctype}/completed.txt",
    shell:
        """
        touch {output}
        """

rule:
    input:
        "{data_dir}/bams/original/{ctype}/{file_id}.bam",
    output:
        temp("{data_dir}/fastq/{ctype}/{file_id}.fq"),
    conda:
        "envs/biotools.yml",
    shell:
        """
        samtools bam2fq {input} > {output}
        """

rule download_mapability:
    output:
        "{data_dir}/reference/hg19_mapability.bw",
        "{data_dir}/reference/hg19_mapability.wig",
    params:
        config['mapability'],
    conda:
        "envs/biotools.yml",
    shell:
        """
        wget -O {output[0]} {params[0]}
        mapCounter {output[0]} > {output[1]}
        """

rule download_reference:
    output:
        "{data_dir}/reference/hg19_raw.fa.gz",
    params:
        config['reference'],
    shell:
        """
        wget -O {output[0]} {params[0]}
        """

rule:
    input:
        "{data_dir}/reference/hg19_raw.fa.gz",
        "{data_dir}/reference/hg19_mapability.wig",
    output:
        "{data_dir}/reference/hg19_pure.fa",
        "{data_dir}/reference/hg19_gc.wig",
        "{data_dir}/reference/hg19_pure.fa.gz",
    params:
        "{data_dir}/reference/hg19_raw.fa",
    conda:
        "envs/biotools.yml",
    shell:
        """
        gunzip -c {input[0]} > {params[0]}
        chroms=$(grep fixed {input[1]} | cut -f 2 -d ' ' | cut -f 2 -d '=' | tr '\n' ',' | sed 's/,$//g')
        seqkit grep -n -p ${{chroms}} {params[0]} | seqkit sort -n > {output[0]}
        gcCounter {output[0]} > {output[1]}
        gzip -c {output[0]} > {output[2]}
        bwa index {output[2]}
        rm {params[0]}
        """

rule:
    input:
        "{data_dir}/fastq/{ctype}/{file_id}.fq",
        "{data_dir}/reference/hg19_pure.fa.gz",
    output:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam.bai",
    conda:
        "envs/biotools.yml",
    threads:
        16
    shell:
        """
        bwa mem -t 16 {input[1]} {input[0]} | samtools sort -@ 16 -o {output[0]} -
        samtools index -@ 16 {output[0]} {output[1]} 
        """

rule:
    input:
        get_downloaded_to_remapped,
    output:
        "{data_dir}/bams/remapped/{ctype}/completed.txt",
    shell:
        """
        touch {output}
        """

rule download_bams:
    input: 
        expand("{data_dir}/bams/original/{ctype}/completed.txt", 
                data_dir=config['data_dir'],
                ctype=config['ctype'])

rule remap_bams:
    input:
        expand("{data_dir}/bams/remapped/{ctype}/completed.txt",
                data_dir=config['data_dir'],
                ctype=config['ctype'])

# checkpoint 19112019
rule:
    input:
        config['reference'],
    output:
        "{data_dir}/bed/{bin_size}.bed",
    conda:
        "envs/biotools.yml",
    shell:
        """
        python ./scripts/create_bed.py      \
            --input {input}                 \
            --output {output}               \
            --bin_size {wildcards.bin_size}
        """

rule:
    input:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
        "{data_dir}/bed/{bin_size}.bed",
    output:
        "{data_dir}/coverage/{ctype}/{file_id}_{bin_size}.tsv.gz",
    conda:
        "envs/biotools.yml",
    shell:
        """
        samtools bedcov {input[1]} {input[0]} | gzip > {output}
        """ 

# end of finished parts
rule:
    input:
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/bed/{bin_size}.bed",
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    output:
        "{data_dir}/segment_means/{ctype}/{file_id}_{bin_size}.tsv.gz",
    conda:
        "envs/biotools.yml",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/generate_dataframes.py part 1
        """

rule:
    input:
        "{data_dir}/coverage/{ctype}/{file_id}_{bin_size}.tsv.gz",
        "{data_dir}/segment_means/{ctype}/{file_id}_{bin_size}.tsv.gz",
        "{data_dir}/fixed/blood_means.tsv.gz",
    output:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.tsv.gz",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/generate_dataframes.py part 2 
        """

rule:
    input:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.tsv.gz",        
    output:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.residuals.tsv.gz",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/lin_model.py
        """

rule:
    input:
        "{data_dir}/dataframes/{ctype}/{file_id}_{bin_size}.residuals.tsv.gz",
    output:
        "{data_dir}/bigwig/{ctype}/{file_id}_{bin_size}.smoothed_residuals.bw",
    shell:
        """
        # /faststorage/project/reprator/Andrej/reprator/analyses/spyder/optimize_filtering_and_smoothing.py
        """


