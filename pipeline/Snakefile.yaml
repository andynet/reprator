configfile: "config.yaml"

# wildcard_constraints:
#     study="TCGA|GTEx",
#     type="exon|gene",
#     size="full|[0-9]+x[0-9]+",
#     filter="pca|naive",
#     nn="ff|pw",
#     architecture="[0-9-]+",
#     labels="samples|stages",

rule get_segments:
    output:
        "{data_dir}/segments/{ctype}.seg.txt",
        "{data_dir}/segments/{ctype}.uniq.txt",
    shell:
        """
        bash scripts/get_segments.sh
        """

# running this manually works, running on a cluster throws OOM error
rule get_manifests:
    output:
        "{data_dir}/manifests/{ctype}.query.tsv",
    conda:
        "envs/tcgabiolinks.yml",
    shell:
        """
        unset http_proxy && unset https_proxy && unset ftp_proxy 
        Rscript ./scripts/get_manifest.R
        """

rule add_segmentdata:
    input:
        "{data_dir}/segments/{ctype}.uniq.txt",
        "{data_dir}/manifests/{ctype}.query.tsv",
    output:
        "{data_dir}/manifests/{ctype}.merged.tsv",
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    conda:
        "envs/py_data.yml",
    shell:
        """
        python ./scripts/add_segment_data.py    \
            --segments {input[0]}               \
            --gdc_query {input[1]}              \
            --merged {output[0]}                \
            --filtered {output[1]}
        """

rule get_bams:
    input:
        "{data_dir}/manifests/{ctype}.filtered.tsv",
    output:
        "{data_dir}/bams/original/{ctype}/{file_id}.bam",
    params:
        "{data_dir}/manifests/{ctype}.{file_id}.tsv",
    shell:
        """
        echo "$(head -n 1 {input})" > {params}; 
        echo "$(grep {wildcards.file_id} {input})" >> {params}
        
        ./scripts/gdc-client download \
            --n-processes 16 \
            -t ~/reprator/faststorage/data/div/gdc-user-token.2019-09-30T13_31_26.704Z.txt \
            -m {params}

        mv ./{wildcards.file_id}/*.bam {output}
        rm -r ./{wildcards.file_id}
        rm {params}
        """

rule get_fq:
    input:
        "{data_dir}/bams/original/{ctype}/{file_id}.bam",
    output:
        "{data_dir}/fastq/{ctype}/{file_id}.fq",
    conda:
        "envs/biotools.yml",
    shell:
        """
        samtools bam2fq {input} > {output}
        """

rule test2:
    input:
        expand("{data_dir}/fastq/{ctype}/{file_id}.fq",
                data_dir = config['data_dir'],
                ctype = "BLCA",
                file_id = "205bfe9f-2bc9-4236-930c-a862874ad8e0",
                ),

rule create_index:
    input:
        config['reference'],
    output:
        "{data_dir}/reference/hg19.fa.gz",
    conda:
        "envs/biotools.yml",
    benchmark:
        "{data_dir}/benchmark.txt",
    shell:
        """
        ln -s $(realpath {input}) {output}
        bwa index {output}
        """ 

rule map_fastq:
    input:
        "{data_dir}/fastq/{ctype}/{file_id}.fq",
        "{data_dir}/reference/hg19.fa.gz",
    output:
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam",
        "{data_dir}/bams/remapped/{ctype}/{file_id}.bam.bai",
    conda:
        "envs/biotools.yml",
    shell:
        """
        bwa mem {input[1]} {input[0]} > {output[0]}
        samtools index {output[0]} {output[1]} 
        """

rule test3:
    input:
        expand("{data_dir}/bams/remapped/{ctype}/{file_id}.bam.bai",
                data_dir = config['data_dir'],
                ctype = "BLCA",
                file_id = "205bfe9f-2bc9-4236-930c-a862874ad8e0",
                ),

# rule get_coverage:
#     input:
#         {data_dir}/downloaded_bams/{sample_id}/{sample_id}.bam
#     output:
#         {data_dir}/get_coverage/coverage_files/tcga_40set_all_chrom.txt.gz
# 
# TODO: remap bams to hg19 
# 
# rule get_seg_means:
#     input:
#         {data_dir}/downloaded/seg.{ctype}.txt
#         # /home/andyb/reprator/faststorage/data/bed_files/hs37d5/{chrom}_1000.bed
#     output:
#         {data_dir}/downloaded/seg_means/{sample}.tsv
# 
# rule get_1000g_transformed:
#     input:
#         /home/andyb/reprator/faststorage/data/coverage_files/all_chrom_hg19.txt.gz
#         /home/andyb/reprator/faststorage/data/sample_info_files/sample_w_type.txt
#     output:
#         {data_dir}/g1000_data_transformed.tsv
#
# rule get_lin_model:
#     input:
#         # /home/andyb/reprator/faststorage/data/bed_files/ref_info_hg19.txt # backbone
# 
#         {data_dir}/get_coverage/coverage_files/tcga_40set_all_chrom.txt.gz  # downloaded TCGA coverage
#         {data_dir}/downloaded/seg.{ctype}.translation.tsv
#
#        {data_dir}/downloaded/seg_means/{sample}.tsv                        # segment data
#
#        {data_dir}/g1000_data_transformed.tsv
#    output:
#        {data_dir}/residuals/{sample}_{ctype}.tsv


